// This next field can be "None", a date in format MMM DD,YYYY or "DEMO"// Remember to change first field in Settings to "BASIC Demo"constant kTimeOut:="None";constant kTimeOutDate:="Jan 01,1998"; // if Demo, when to time out.print(kProjectSettings);// The format of this next field must start "Version X.Y" & anything else okconstant kVersion:="Version 3.61";defconst('kRunTime, if kAppSymbol='|BASIC:NSBASIC| then NIL else TRUE);defconst('kFat, if kAppSymbol='|Fat:NSBASIC| then TRUE else NIL);constant kUpdate:=TRUE;constant debug:=nil;constant kCommstrace:=nil;constant kChunkTrace:=nil;constant kShowCompile:=nil; // display code to be compiledconstant kSignature:="NSBASIC";//defconst('kAppSymbol,   if kRunTime then '|RUNTIME:NSBASIC|//												else '|BASIC:NSBASIC|);//defconst('kPackageName, if kRunTime then "RUNTIME:" & kSignature//												else "BASIC:" & kSignature);print("kAppSymbol:" & sPrintObject(kAppSymbol));defconst('kExt,".BAS:" & kSignature);defconst('kShortPath,"getroot().|" & kPackageName & "|.");defconst('kShortPathA,"getroot().|" & kPackageName & "|");defconst('kStepChildren,"getroot().|" & kPackageName & "|.stepchildren");defconst('kPath,"getroot().|" & kPackageName & "|.screenview.");defconst('kMakePkgSym, '|makePkg:NSBASIC|);defconst('kUpdater, '|updater:NSBASIC|);defconst('kToolsSymbol, '|tools:NSBASIC|);knownGlobalFunctions.getPkgRef:=2;knownGlobalFunctions.ConvertToUniJ:=3;knownGlobalFunctions.StrHexDump:=2;knownGlobalFunctions.charPos:=3;partData:={}; // used for runtime//defconst('kBuildTime, datentime(time()));DefConst ('myTime, Time());DefConst ('myFrameDate, Date(myTime));DefConst ('myDay, myFrameDate.Date);DefConst ('myMonth, myFrameDate.month);DefConst ('myYear, myFrameDate.year);DefConst ('kBuildTime, myMonth&"/"&myDay&"/"&myYear);print(kBuildTime);defconst('kU, 'U);constant kMaxChunkSize:=2000; // max number of bytes in each SAVE chunk (approx)constant kHeadBase:=99999;constant kDataBase:=100000;constant kListBase:=200000;constant kAppObject:='["statement","statements"];defconst('kSoupName,"SCRATCH");defconst('kSoupName1,"SCRATCH1" & kExt);defconst('kSystemSoupTag, "BASIC:" & kSignature);defconst('kSysEntry, {tag: kSystemSoupTag,   					  inputPrompt: "? ",   					  io: "SCREEN",   					  printDepth: 1,   					  listWidgets: NIL,   					  programName: kSoupName,   					  extr: {connect: "Connected." & unicodeCR & "* "},   					  mdem: {connect: "Connected." & unicodeCR & "* ",   					  	phone: NIL},   					  mmnp: {connect: "Connected." & unicodeCR & "* ",   					  	HWflow: nil, SWFLOW: nil, phone: NIL},						  infr: {connect: "Connected. * "},							slt1: {connect: "Connected." & unicodeCR & "* "},   					  slt2: {connect: "Connected." & unicodeCR & "* "},	 					  serialNumber: 0,	 					  showKeyboard: NIL,	    					  store: 1,   					  useScratch: TRUE,   					  enableBreak: NIL,						  cacheMax: 3,						  makeFatPackage: NIL,						  lastUser: "",   					  });defconst('kEmptyCh, {chLines: -1, 							lines: [],							keywords: [], 							statements: [],	 							minLine: 0, 				 							LineNo: 0});				  		 constant kSoupIndexes:='[{structure: slot, path: LineNo, type: int}];constant kAlpha:="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_$'.";constant kNumeric:="0123456789.";defconst('kAlphaNumeric,kAlpha & kNumeric);constant kOperator:="+-/*()=<>&";constant kCompareOps:="=<>";constant spaces:="          ";defconst('quote,sPrintObject(chr(34)));defconst('CR,sPrintObject(chr(13)));defconst('LF,sPrintObject(chr(10)));defconst('BS,sPrintObject(chr(8)));defconst('kCharList,kalpha & "9876543210" & kOperator & " abcdefghijklmnopqrstuvwxyz");defconst('kcharListLen, strLen(kCharList));//defconst('printFormat, protoPrintFormat);defconst('kError1,["Error 1 - Incorrect Data Type" & CR]);defconst('kError2,["Error 2 - Statement or syntax invalid" & CR]);defconst('kError3,["Error 3 - READ/DATA types inconsistent" & CR]);defconst('kError4,["Error 4 - Invalid Checksum on Runtime" & CR]);defconst('kError5,["Error 5 - Statement Number" & CR]);defconst('kError6,["Error 6 - Internal Error saving line" & CR]);defconst('kError7,["Error 7 - Label already exists" & CR]);defconst('kError8,["Error 8 - Renumber overlap" & CR]);defconst('kError9,["Error 9 - Invalid Label" & CR]);defconst('kError11,["Error 11 - Parenthesis" & CR]);defconst('kError12,["Error 12 - Label not found" & CR]);defconst('kError13,["Error 13 - Line Number" & CR]);defconst('kError14,["Error 14 - Out of Memory" & CR]);defconst('kError15,["Error 15 - End of DATA" & CR]);defconst('kError16,["Error 16 - Arithmetic" & CR]);defconst('kError17,["Error 17 - Expected a Number" & CR]);defconst('kError19,["Error 19 - RETURN - No GOSUB" & CR]);defconst('kError21,["Error 21 - FOR - No Next" & CR]);defconst('kError22,["Error 22 - NEXT - No FOR" & CR]);defconst('kError23,["Error 23 - No such widget" & CR]);defconst('kError24,["Error 24 - Invalid WindowSpec" & CR]);defconst('kError25,["Error 25 - Unknown Window" & CR]);defconst('kError29,["Error 29 - Expression" & CR]);defconst('kError30,["Error 30 - Object is read only" & CR]);defconst('kError31,["Error 31 - Subscript or Frame error" & CR]);defconst('kError32,["Error 32 - Program must be SAVEd" & CR]);defconst('kError34,["Error 34 - Not a bitmap" & CR]);defconst('kError35,["Error 35 - MakePkg not installed" & CR]);defconst('kError36,["Error 36 - VisualDesigner not installed" & CR]);defconst('kError46,["Error 46 - Input Error" & CR]);defconst('kError48,["Error 48 - Incorrect SAVE version" & CR]);defconst('kError59,["Error 59 - Zero step" & CR]);defconst('kError60,["Error 60 - LOOP without DO" & CR]);defconst('kError61,["Error 61 - EXIT not in loop" & CR]);defconst('kError63,["Error 63 - Incorrect # of args" & CR]);defconst('kError87,["Error 87 - Missing ELSE or ENDIF" & CR]);defconst('kError88,["Error 88 - Unexpected ELSE,ENDIF" & CR]);defconst('kErrorM1,["I/O Error 1 - Illegal file name" & CR]);defconst('kErrorM2,["I/O Error 2 - Illegal key" & CR]);defconst('kErrorM3,["I/O Error 3 - Opened without keys" & CR]);defconst('kErrorM4,["I/O Error 4 - Incorrect key type" & CR]);defconst('kErrorM5,["I/O Error 5 - File already Exists" & CR]);defconst('kErrorM6,["I/O Error 6 - End of file" & CR]);defconst('kErrorM10,["I/O Error 10 - File not found" & CR]);defconst('kErrorM11,["I/O Error 11 - Not a Newton Book" & CR]);defconst('kErrorM12,["I/O Error 12 - no key on OPEN" & CR]);defconst('kErrorM13,["I/O Error 13 - Channel not open" & CR]);defconst('kErrorM14,["I/O Error 14 - Error creating file" & CR]);defconst('kErrorM20,["I/O Error 20 - Connect failed" & CR]);defconst('kErrorM21,["I/O Error 21 - Buffer overrun" & CR]);defconst('kErrorM22,["I/O Error 22 - Comms timed out" & CR]);defconst('kErrorM23,["I/O Error 23 - Port in use" & CR]);defconst('kErrorM24,["I/O Error 24 - No such port" & CR]);defconst('kErrorM25,["I/O Error 25 - Comms output overun" & CR]);defconst('kErrorM26,["I/O Error 26 - Modem not found" & CR]);defconst('kErrorM27,["I/O Error 27 - No dial tone" & CR]);defconst('kErrorM28,["I/O Error 28 - No answer" & CR]);defconst('kErrorM29,["I/O Error 29 - Line busy" & CR]);defconst('kErrorM30,["I/O Error 30 - Modem not responding" & CR]);defconst('kErrorM31,["I/O Error 31 - Modem connect failed" & CR]);defconst('kErrorM32,["I/O Error 32 - Error correct failed" & CR]);defconst('kErrorM33,["I/O Error 33 - Lost connection" & CR]);defconst('kErrorM34,["I/O Error 34 - Invalid phone number" & CR]);defconst('kErrorM35,["I/O Error 35 - Port not connected" & CR]);defconst('kKeyword,["REM","LET","IF","GOTO","GOSUB","RETURN","FOR","NEXT","ON","READ","DATA","RESTORE","DIM","INPUT","PRINT","DELETE","RANDOMIZE","CHAIN","CLS","END","STOP","BYE","THEN","TO","STEP","AND","OR","NOT","NIL","TRUE","BEEP","ELSE","ERROR","TRACE","OFF","OPEN","GET","PUT","DEL","CREATE","ENTER","MOD","DIV","HWINPUT","WINDOW","SHOW","HIDE","WPRINT","ESPY","NEWYORK","GENEVA","WAIT","ENVIRON","FUNCTION","DEF","WDRAW", "ERASE","HPPRINT","CLOSE","EDIT","SETICON","MAKEPACKAGE","DO","LOOP","UNTIL","WHILE","EXIT","ELSEIF","ENDIF"]);// These statements require no further interpretationconstant kREM:=1;constant kDATA:=2;// These statements get run through the interpreterconstant kLET:=21;constant kRANDOMIZE:=22;constant kTRACE:=23;constant kWINDOW:=24;constant kSHOW:=25;constant kHIDE:=26;constant kWPRINT:=27;constant kFUNCTION:=28;constant kDEF:=29;constant kWDRAW:=30;constant kBEEP:=31;constant kFOR:=32;constant kNEXT:=33;constant kGOTO:=34;constant kGOSUB:=35;constant kRETURN:=36;constant kBYE:=37;constant kCHAIN:=38;constant kCLS:=39;constant kCREATE:=40;constant kOPEN:=41;constant kGET:=42;constant kPUT:=43;constant kDEL:=44;constant kEND:=45;constant kSTOP:=46;constant kPRINT:=47;constant kIF:=48;constant kDIM:=49;constant kWAIT:=50;constant kHPPRINT:=51;constant kENVIRON:=52;constant kDELETE:=53;constant kENTER:=54;constant kERASE:=55;constant kHWINPUT:=56;constant kINPUT:=57;constant kON:=58;constant kREAD:=59;constant kRESTORE:=60;constant kCLOSE:=61;constant kSETICON:=62;constant kMAKEPACKAGE:=63;constant kIFblock:=64;constant kELSE:=65;constant kDO:=66;constant kEXIT:=67;constant kLOOP:=68;constant kEndIf:=69;constant kWidgetDef:=70;defconst('kStatements,["REM","DATA",			"LET","RANDOMIZE","TRACE","WINDOW","SHOW","HIDE","WPRINT","FUNCTION","DEF","WDRAW","BEEP",			"IF","GOTO","GOSUB","RETURN","FOR","NEXT","ON","READ","RESTORE","DIM","INPUT",			"PRINT","DELETE","CHAIN","CLS","END","STOP","BYE","OPEN","GET","PUT","DEL",			"CREATE","ENTER","HWINPUT","WAIT","ENVIRON","ERASE","HPPRINT","CLOSE","SETICON",			"MAKEPACKAGE","IFBLOCK","ELSE","DO","EXIT","LOOP","ENDIF","WIDGETDEF"]);defconst('kstatementCodes,[kREM,kDATA,			kLET,kRANDOMIZE,kTRACE,kWINDOW,kSHOW,kHIDE,kWPRINT,kFUNCTION,kDEF,kWDRAW,kBEEP,			kIF,kGOTO,kGOSUB,kRETURN,kFOR,kNEXT,kON,kREAD,kRESTORE,kDIM,kINPUT,kPRINT, 			kDELETE,kCHAIN,kCLS,kEND,kSTOP,kBYE,kOPEN,kGET,kPUT,kDEL,kCREATE,kENTER,			kHWINPUT,kWAIT,kENVIRON,kERASE,kHPPRINT,kCLOSE,kSETICON,kMAKEPACKAGE,			kIFblock,kELSE,kDO,kEXIT,kLOOP,kENDIF,kWIDGETDEF]);defconst('kConstants,{ 	name: ["VFFILLWHITE","VFFILLLTGRAY","VFFILLGRAY",			 "VFFILLDKGRAY","VFFILLBLACK",			 "VFFRAMEWHITE", "VFFRAMELTGRAY", "VFFRAMEGRAY",			 "VFFRAMEDKGRAY", "VFFRAMEBLACK","VFFRAMEMATTE",			 "VFNONE","VFWHITE","VFLTGRAY","VFGRAY","VFDKGRAY","VFBLACK",			 "VFPEN","VFSHADOW","VFROUND",			 			 "VFFILLCUSTOM","VFFRAMECUSTOM",			 "RGB_GRAY0","RGB_GRAY1","RGB_GRAY2","RGB_GRAY3",			 "RGB_GRAY4","RGB_GRAY5","RGB_GRAY6","RGB_GRAY7",			 "RGB_GRAY8","RGB_GRAY9","RGB_GRAY10","RGB_GRAY11",			 "RGB_GRAY12","RGB_GRAY13","RGB_GRAY14","RGB_GRAY15",			 "VVISIBLE","VAPPLICATION","VCALCULATEBOUNDS", "VCLIPPING","VFLOATING",			 "VREADONLY","VCLICKABLE","VNOFLAGS","VNOTHINGALLOWED","VANYTHINGALLOWED",			 "VSTROKESALLOWED","VGESTURESALLOWED","VSHAPESALLOWED","VSINGLEUNIT",			 "VCHARSALLOWED","VLETTERSALLOWED","VNAMEFIELD",			 "VPUNCTUATIONALLOWED","VCAPSREQUIRED","VNUMBERSALLOWED","VPHONEFIELD",			 "VDATEFIELD","VTIMEFIELD","VNOSPACES"],	value:[VFFILLWHITE,VFFILLLTGRAY,VFFILLGRAY,			 VFFILLDKGRAY, VFFILLBLACK,			 VFFRAMEWHITE, VFFRAMELTGRAY, VFFRAMEGRAY,			 VFFRAMEDKGRAY, VFFRAMEBLACK, VFFRAMEMATTE,			 VFNONE,VFWHITE,VFLTGRAY,VFGRAY,VFDKGRAY,VFBLACK,			 256,262144,16777216,			 			 VFFILLCUSTOM,VFFRAMECUSTOM,			 KRGB_GRAY0,KRGB_GRAY1,KRGB_GRAY2,KRGB_GRAY3,			 KRGB_GRAY4,KRGB_GRAY5,KRGB_GRAY6,KRGB_GRAY7,			 KRGB_GRAY8,KRGB_GRAY9,KRGB_GRAY10,KRGB_GRAY11,			 KRGB_GRAY12,KRGB_GRAY13,KRGB_GRAY14,KRGB_GRAY15,			 VVISIBLE,VAPPLICATION,VCALCULATEBOUNDS, VCLIPPING,VFLOATING,			 VREADONLY,VCLICKABLE,VNOFLAGS,VNOTHINGALLOWED,VANYTHINGALLOWED,			 VSTROKESALLOWED,VGESTURESALLOWED,VSHAPESALLOWED,VSINGLEUNIT,			 VCHARSALLOWED,VLETTERSALLOWED,VNAMEFIELD,			 VPUNCTUATIONALLOWED,VCAPSREQUIRED,VNUMBERSALLOWED,VPHONEFIELD,			 VDATEFIELD,VTIMEFIELD,VNOSPACES]});defconst('kCommand,["LIST","SAVE","LOAD","REPLACE","RENUM","RUN","BYE","REVUP",         "STATS","NEW","NEWPROGRAM","DIR","VARS","CON","STRIP","EDIT","TOOLS"]);defconst('kFunctions,["ELEMENTS","ENV","SENDIRREMOTE","HEXDUMP","NOTIFY",					"ICONNECT","IODISCONNECT","IOPRINT","PROGRESS","WPROPERTY","TAB"]);defconst('kCommandPickList, ["RUN","CON","LIST","REPLACE",	"NEW","NEWPROGRAM",	"RENUM","MAKEPACKAGE","REVUP","STRIP",	'pickSeparator,	"DIR","STATS","TOOLS","VARS",	'pickSeparator,	"LOAD filename",	"LIST",	"LIST [stmt[,stmt[,filename]]]",	"LIST ,,\"Clipboard\"",	"SAVE filename",	"ENTER filename[.BAS]",	"ENTER \"Clipboard\"",	"RENUM [from[,to[,step[,base]]]]",	"RUN lineNo or filename",	"DELETE filename"]);	defconst('kStatementPickList, 	["next lineNo", 	"next lineNo in Edit Box", 	'pickSeparator,		"CLS",	"REM text",	"IF cond",	"THEN [stmt]",	"ELSE [stmt]",	"END IF",	"GOTO lineNo",	"GOSUB lineNo",	"FOR var=start TO end STEP",	"NEXT var",	"EXIT [FOR|DO]",	"DO [ |UNTIL|WHILE]",	"LOOP [ |UNTIL|WHILE]",	"ON cond THEN GOTO stmtList",	"READ var[,var...]",	"DATA const[,const]",	"INPUT var[,var...]",	"PRINT exp[, or ; exp...]",		'pickSeparator,	"OPEN ch,file[,key]",	"GET ch,var[,key]",	"PUT ch,var",	"DEL ch,var",		'pickSeparator,	"WIDGETDEF wSpec",	"WINDOW wNum[,wSpec[,wName]",	"SHOW wNum[,wNum...]",	"WPRINT wNum,var",	"HIDE [wNum[,wNum...]]",	"HWINPUT var[,prompt[,list]]"]);	defconst('kRenumWords,["GOTO ","GOSUB ","RESTORE","GOTO:",".GOTO","GOSUB:",".GOSUB"]);defconst('kBeeps, [ROM_bootsound, ROM_alarmwakeup, ROM_click, ROM_crumple, ROM_drawerclose,                   ROM_draweropen, ROM_flip, ROM_funbeep, ROM_hilitesound, ROM_plinkbeep,                   ROM_simpleBeep, ROM_wakeupbeep, ROM_plunk, ROM_poof]);// communcations constantsconstant kState_Disconnected := 0;	// ready-to-go (default state)constant kState_Connecting := 1;	// in-process of (asynchronous) connectconstant kState_Connected := 2;		// connected (requires disconnect)constant kState_Disconnecting := 3;	// in-process of (asynchronous) disconnectdefconst('kcomms,	{bps: {name: [300,600,1200,2400,4800,7200,9600,12000,14400,19200,38400,57600,115200,230400],			 value: [k300bps,k600bps,k1200bps,k2400bps,k4800bps,k7200bps,k9600bps,k12000bps,			 			k14400bps,k19200bps,k38400bps,k57600bps,k115200bps,k230400bps]},	 dataBits: {name: [5,6,7,8],	 				value: [k5DataBits,k6DataBits,k7DataBits,k8DataBits]},	 stopbits: {name: [0,1,2],	 				value: [k1stopBits,k1pt5stopBits,k2stopBits]},	 parity:	  {name: ["no","odd","even"],	 				value: [kNoParity,kOddParity,kEvenParity]}	});defconst('kSerialOptions, [			{	label: kCMSAsyncSerial,				type: 'service,				opCode: opSetRequired,				result: nil	},						{	label: kCMOSerialHWChipLoc,				type: 'option,				opCode: opSetRequired,				result: nil,				form: 'template,				data:	{   // services can be kHWLocExternalSerial, kHWLocBuiltInIR, kHWLocPCMCIASlot1					argList: ["extr", 0],					typeList: ['struct, ['array, 'char, 4], 'ulong	],	},	},								{ label: kCMOSerialBuffers,				type: 'option,				opcode: opSetRequired,				data: {arglist: [256, 2048, 8], // out, in, error chars				       typeList: ['struct, 'ulong, 'ulong, 'ulong]}},						{	label:		kCMOSerialIOParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				form:		'template,				data:	{					arglist:	[k1StopBits,kNoParity,k8DataBits,k9600bps],								typelist:	['struct,'long,'long,'long,'long]	}	},		// bps						{	label:		kCMOInputFlowControlParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				data:	{					arglist:	[						unicodeDC1, 			// xonChar							unicodeDC3, 			// xoffChar							true, 					// useSoftFlowControl							nil, 					// useHardFlowControl							0, 						// not needed; returned							0,	], 					// not needed; returned						typelist:	['struct,						'byte,					// XON character						'byte,					// XOFF character						'boolean,				// software flow control						'boolean,				// hardware flow control						'boolean,				// hardware flow blocked						'boolean,	],	},	},	// software flow blocked			{	label:		kCMOOutputFlowControlParms,				type:		'option,				opCode:		opSetRequired,				result:		nil,				form:		'template,				data:	{					arglist:	[						unicodeDC1, 			// xonChar							unicodeDC3, 			// xoffChar							true, 					// useSoftFlowControl							nil, 					// useHardFlowControl							0, 						// not needed; returned							0,	], 					// not needed; returned						typelist:	['struct,						'byte,					// XON character						'byte,					// XOFF character						'boolean,				// software flow control						'boolean,				// hardware flow control						'boolean,				// hardware flow blocked						'boolean,	],	},	},	// software flow blocked		]);		defconst('kModemOptions,		[			{	label:		kCMSModemID,			// "mods"				type:		'service,				result:		nil,				opCode:		opSetRequired	},		// 512						{	label:		kCMOModemECType,		// "mecp"				type:		'option,				opCode:		opSetNegotiate,			// 256				result:		nil,				form: 		'template,				data:	{					arglist:[						0,	],					typelist:['struct,						'ulong,	],	},	},						{	label:		kCMOMNPCompression,		// "mnpc"				type:		'option,				opCode:		opSetNegotiate,			// 256				result:		nil,				form: 		'template,				data:	{					arglist:[						kMNPCompressionV42bis + kMNPCompressionMNP5 + kMNPCompressionNone,	],	// 0000 0000 0000 1011					typelist:['struct,						'ulong,	],	},	},		]); defconst('kProgramTemplate, [ "0010 REM program template", "0020 appSpec={goto:'endProgram,title:" & quote & "Demo" & quote &"}", "0030 window app,appSpec," & quote & "APP" & quote, "0040 show app", "0050 widgetdef Layout_0", "0060 window wlist,Layout_0", "0070 show wlist", "0100 wait -1 // indefinitely", "9000 endProgram: rem", "9010 hide", "9020 stop"  ]); 