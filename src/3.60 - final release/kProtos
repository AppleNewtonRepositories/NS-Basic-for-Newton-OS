constant allProtos:=TRUE;defconst('kProtos, {	// this one is a special case: it puts up a simple window   pt_userView: {goto: NIL, gosub: NIL, drawing: []},	//app:			{goto: NIL, gosub: NIL, _proto: TRUE},	app:			{_proto: TRUE},	azTabs:		{_proto: if allProtos then protoAZtabs,						 viewBounds: {top: 1, bottom: 20, left:1, right: 0},						 viewFlags: vClickable,						 pickLetterScript: func(letter) begin								self.text:=letter;								executor:userClickAction(NIL,self) end },	azVertTabs:		{_proto: if allProtos then protoAZVertTabs,						 viewBounds: {top: 1, bottom: 1, left:1, right: 30},						 viewFlags: vClickable,						 pickLetterScript: func(letter) begin								windowSpec.text:=letter;								executor:userClickAction(NIL,self) end },  	checkbox:    {_proto: protoCheckBox, viewValue: NIL,    				  text: "Checkbox", viewBounds: {left: 100, right: 200, top:100, bottom: 120},							   viewFlags: vClickable,    				  valueChanged: func() begin windowSpec.viewvalue:=self.viewValue end,    				  viewClickScript: func(unit) begin inherited:?viewClickScript(unit);    				  						 executor:userClickAction(unit,self) end},	closeBox:	{_proto: protoCloseBox,   				  declareSelf: 'base,   				  viewFlags: vClickable + vReadOnly,   				  buttonClickScript: func() begin executor:userClickAction(NIL,self);    				  						   end},	datePicker: {_proto: if allProtos then protoDatePicker, 						viewBounds: {left: 100, right: 220, top: 120, bottom: 200},            viewFlags: vClickable,						selectedDates: [],   				  viewSetupFormScript: func() selectedDates:=[time()],    				  dateChanged: func(dates) begin							local context:=self._parent;							if NOT hasSlot(context, 'windowSpec) then context:=context._parent;							windowSpec.selectedDates:=context.dates;							executor:userClickAction(NIL,context) end},			  							digitalClock: {_proto: if allProtos then protoDigitalClock,			  						 						viewBounds: {left: 1, right: 119, top: 101, bottom: 128},						time: time(),        			viewFlags: vClickable,						timeChanged: func() begin							local context:=self._parent;							if NOT hasSlot(context, 'windowSpec) then context:=context._parent;							windowSpec.time:=context.time;							executor:userClickAction(NIL,context) end},   				  						 	draw:		 	{viewClass: clEditView, viewBounds: {Left:1, right: 100, top:1, bottom: 100},   				  viewFlags: vClickable+vGesturesAllowed+vShapesAllowed,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1)+vfLinesGray,   				  viewLineSpacing: 20,   				  viewChildren: clone([]),   				  viewFont: simpleFont18,   				  viewaddChildScript: func(newOne) begin   				  		if length(windowSpec.viewChildren)=0 then windowSpec.viewChildren:=[];   				  		addArraySlot(windowSpec.viewChildren, newOne);					      NIL end },   				  			     	// this one doesn't work: it may be the viewChildren slot for the checkbox	floatNGo:	 {_proto: protofloatNGo, viewBounds: {left: 50, right: 100, top: 6, bottom: 40},   				  text: "FloatNGo", viewChildren: [{_proto: protoStaticText}]},   				  	glance:	 {_proto: protoGlance, viewBounds: {left: 100, right: 200, top: 60, bottom: 75},			    				  text: "Glance"},	gauge:   {viewClass: clGaugeView, viewValue:50,   				  viewBounds: {left: 100, right: 200, top: 90, bottom: 100},					  viewFlags: vReadOnly,					  gaugedrawlimits: TRUE,					  viewSetupFormScript: NIL},	//imageView: {_proto: protoImageView},   				  	labelInput:	 {_proto: protoLabelInputLine, 					  viewFlags: vReadOnly+vClickable,					  viewBounds: {left:100, right: 240, top: 40, bottom: 60},			  		label: "Label", 			  		text: "", 			  		viewValue: 0, 					  textSetup: func() begin setup:=true; text end, setup: NIL,					  viewShowScript: func() begin setValue(entryLine, 'text, text) end,   				  labelActionScript: func(x) begin windowspec.viewValue:=x;																  local s:=self._parent;    				  				   					NIL end,					  textChanged: func() begin windowSpec.text:=self.text;    				  				         		local s:=self._parent;    				  				   			    if setup then setup:=NIL    				  				   			             else executor:userClickAction(NIL,s) end},	labelPicker: {_proto: protoLabelPicker, viewBounds: {left:100, right: 240, top: 40, bottom: 60},   				  labelCommands: ["One","Two","Three"], text: "labelPicker", viewValue: 0,   				  textSetup: func() begin labelCommands[viewValue] end,   				  labelActionScript: func(x) begin windowspec.viewValue:=x;    				  				   						  executor:userClickAction(NIL,self); NIL end},	LargeCloseBox: {_proto: protoLargeCloseBox,   				  declareSelf: 'base,   				  viewFlags: vClickable + vReadOnly,   				  buttonClickScript: func() begin executor:userClickAction(NIL,self);    				  						   end},				  							month:	 {viewClass: clMonthView, viewBounds: {left: 100, right: 200, top: 120, bottom: 180},         		viewFlags: vClickable,   				  selectedDates: [time()],   				  labelFont: ROM_fontsystem9Bold, dateFont: ROM_fontSystem9,   				  monthChangedScript: func() begin windowSpec.selectedDates:=self.selectedDates;    				  				         		executor:userClickAction(NIL,self) end},	newSetClock: {_proto: if allProtos then protoNewSetClock,					 viewBounds: {left: 1, right: 64, top:1, bottom: 64},					 viewFlags: vClickable,   				 minutes: date(time()).minute, hours: date(time()).hour,   				 timeChanged: func() begin windowSpec.hours:=hours;   				 									windowSpec.minutes:=minutes;   				 									:dirty();    				  				      executor:userClickAction(NIL,self) end},    				  				      	numberPicker: {_proto: if allProtos then protoNumberPicker, 						viewBounds: {left: 1, right: 200, top: 131, bottom: 160},       			viewFlags: 0,						minValue: 0, 						maxValue: 9999999,						Value: 0,						showLeadingZeros: TRUE,						clickDone: func() begin							local context:=self._parent;							if NOT hasSlot(context, 'windowSpec) then context:=context._parent;							windowSpec.value:=context.value;							setvalue(windowSpec, 'value, windowSpec.value);							executor:userClickAction(NIL,context) end},    				  				   						  	paragraph: {viewClass: clParagraphView, viewBounds: {Left:1, right: 100, top:150, bottom: 240},   				  viewFlags: vReadOnly,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1),   				  viewLineSpacing: 16,   				  text: "paragraph", viewFont: simpleFont12},	//peoplePicker: {_proto: protoPeoplePicker},	pictureButton: {_proto: protoPictureButton,						viewBounds: {Left:1, right: 32, top:1, bottom: 32},      			viewFlags: vClickable+vReadOnly,   				  buttonClickScript: func() begin executor:userClickAction(NIL,self);    				  						   end}, 			  				   						      				  				   						   				  				   	picker:		{_proto: protoPicker, Bounds: {left:1, right: 95, top:120, bottom: 140},   				  pickItems: [{item: "Picker", pickable: true, mark: kCheckMarkChar},   				  'pickseparator,"Two","Three"],					  viewFormat: vfFrameBlack+vfFillWhite+vfPen(2)+vfround(4),   				  pickActionScript: func(x) begin windowSpec.viewvalue:=x;    				  				         executor:userClickAction(NIL,self) end},				  				       				  				    	rCheckbox: {_proto: protoRCheckBox, viewValue: NIL,    				  text: "RCheckbox", viewBounds: {left: 1, right: 95, top:100, bottom: 120},    				  indent: 6,							viewFlags: vClickable,    				  valueChanged: func() begin windowSpec.viewvalue:=self.viewValue end,    				  viewSetupFormScript: func() begin indent:=viewBounds.right-10 end,    				  viewClickScript: func(unit) begin inherited:?viewClickScript(unit);    				  						 executor:userClickAction(unit,self) end},   	// doesn't work: is it the child views again? 				  						 	recToggle:	 {_proto: protoRecToggle},	scroller:	 {_proto: TRUE, viewFlags: 0},  				  						     				  						 	setClock:	 {_proto: protoSetClock, viewBounds: {left: 1, right: 64, top:1, bottom: 64},        	 viewFlags: vClickable+vStrokesAllowed,   				 minutes: date(time()).minute, hours: date(time()).hour,   				 timeChanged: func() begin windowSpec.hours:=hours;   				 									windowSpec.minutes:=minutes;   				 									:dirty();    				  				      executor:userClickAction(NIL,self) end},  				     				 						 				  						 	slider:  {_proto: protoSlider, viewValue:50,         		viewFlags: vClickable,   				  viewBounds: {left: 100, right: 200, top: 90, bottom: 100},   				  viewSetupFormScript: func() begin end,   				  changedSlider: func() begin windowSpec.viewvalue:=self.viewValue;    				  						 executor:userClickAction(NIL,self) end},	status:	 {_proto: protoStatus},	text:	   {viewClass: clParagraphView, viewBounds: {Left:110, right: 220, top:1, bottom: 100},   				  viewFlags: vClickable+vGesturesAllowed+vCharsAllowed+vPunctuationAllowed+vNumbersAllowed,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1)+vfLinesGray,   				  viewLineSpacing: 16,   				  text: "input", viewFont: simpleFont18, tabs: [20,40,60,80,120,140,160,180],   				  viewChangedScript: func(slot,view) begin windowSpec.text:=self.text;    				  				         		 executor:userClickAction(NIL,self) end },    				  				         		 	textButton: {_proto: protoTextButton,						GOTO: nil, GOSUB: nil,						viewBounds: {Left:1, right: 60, top:1, bottom: 16},      			viewFlags: vClickable+vReadOnly,      			text: "Button",      			viewFont: ROM_fontsystem9Bold,      			viewFormat: vfFrameBlack + vfpen(2) + vfround(4),   				  buttonClickScript: func() begin executor:userClickAction(NIL,self);    				  						   end}, 			  				   						  	textList: {_proto: protoTextList,						 viewBounds: {top: 10, left: 10, right: 100, bottom: 100},						 useScrollers: TRUE,						 listItems: ["one","two","three"],						 viewFormat: vfFrameBlack + vfpen(1) + vfFillWhite,						 viewSetupDoneScript: func() begin :setupList(); :redochildren() end,						 scrollAmounts: [1,5,20]},  title:	 {_proto: protoStaticText,   					viewBounds: {Left:1, right: 60, top:20, bottom: 35},  					viewJustify: vjLeftH,  					viewFont: ROM_fontSystem12Bold,  					viewFlags: vVisible,  					text: "title",  					viewFormat: vfNone},   });