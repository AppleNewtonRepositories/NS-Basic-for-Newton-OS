// This next field can be "None", a date in format MMM DD,YYYY or "DEMO"// Remember to change first field in Settings to "BASIC Demo"constant kTimeOut:="None";// The format of this next field must start "Version X.Y" & anything else okconstant kVersion:="Version 2.52";constant kRuntime:=TRUE;  // remember to also change the setting panelconstant debug:=NIL;constant kIOTrace:=NIL;constant kChunkTrace:=NIL;constant kShowCompile:=NIL; // display code to be compiledconstant kSignature:="NSBASIC";//defconst('kAppSymbol,   if kRunTime then '|RUNTIME:NSBASIC|//												else '|BASIC:NSBASIC|);//defconst('kPackageName, if kRunTime then "RUNTIME:" & kSignature//												else "BASIC:" & kSignature);defconst('kExt,".BAS:" & kSignature);defconst('kShortPath,"getroot().|" & kPackageName & "|.");defconst('kShortPathA,"getroot().|" & kPackageName & "|");defconst('kStepChildren,"getroot().|" & kPackageName & "|.stepchildren");defconst('kPath,"getroot().|" & kPackageName & "|.screenview.");//defconst('kBuildTime, datentime(time()));DefConst ('myTime, Time());DefConst ('myFrameDate, Date(myTime));DefConst ('myDay, myFrameDate.Date);DefConst ('myMonth, myFrameDate.month);DefConst ('myYear, myFrameDate.year);DefConst ('kBuildTime, myMonth&"/"&myDay&"/"&myYear);print(kBuildTime);defconst('kU, 'U);constant kMaxChunkSize:=2000; // max number of bytes in each SAVE chunk (approx)constant kAppObject:='["statement","statements"];defconst('kSoupName,"SCRATCH" & kExt);defconst('kSoupName1,"SCRATCH1" & kExt);defconst('kSysEntry, {tag: kPackageName,   					  inputPrompt: "? ",   					  io: "SCREEN",   					  printDepth: 1,   					  programName: kSoupName,   					  s0: {data: [9600,8,1,"no"],   					  		 connect: "Connected." & unicodeCR & "* ",   					 		 unpend: unicodeCR},						  IR: {connect: "Connected. * ",							    unpend: unicodeCR},   					  serialNumber: 0,	    					  store: 1,   					  useScratch: TRUE,						  cacheMax: 3;   					  });					  		 constant kSoupIndexes:='[{structure: slot, path: LineNo, type: string}];constant kAlpha:="ABCDEFGHIJKLMNOPQRSTUVWXYZ_$'.";constant kNumeric:="0123456789.";defconst('kAlphaNumeric,kAlpha & kNumeric);constant kOperator:="+-/*()=<>&";constant kCompareOps:="=<>";constant spaces:="          ";defconst('quote,sPrintObject(chr(34)));defconst('CR,sPrintObject(chr(13)));defconst('BS,sPrintObject(chr(8)));defconst('kCharList,kalpha & "9876543210" & kOperator & " abcdefghijklmnopqrstuvwxyz");defconst('kcharListLen, strLen(kCharList));defconst('kImportProgram, "Import Program" & CR);defconst('kError1,["Error 1 - Incorrect Data Type" & CR]);defconst('kError2,["Error 2 - Statement or syntax invalid" & CR]);defconst('kError3,["Error 3 - READ/DATA types inconsistant" & CR]);defconst('kError4,["Error 4 - Invalid Checksum on Runtime" & CR]);defconst('kError5,["Error 5 - Statement Number" & CR]);defconst('kError6,["Error 6 - Internal Error saving line" & CR]);defconst('kError8,["Error 8 - Renumber overlap" & CR]);defconst('kError11,["Error 11 - Parenthesis" & CR]);defconst('kError13,["Error 13 - Line Number" & CR]);defconst('kError14,["Error 14 - Out of Memory" & CR]);defconst('kError15,["Error 15 - End of DATA" & CR]);defconst('kError16,["Error 16 - Arithmetic" & CR]);defconst('kError17,["Error 17 - Expected a Number" & CR]);defconst('kError19,["Error 19 - RETURN - No GOSUB" & CR]);defconst('kError21,["Error 21 - FOR - No Next" & CR]);defconst('kError22,["Error 22 - NEXT - No FOR" & CR]);defconst('kError23,["Error 23 - No such widget" & CR]);defconst('kError24,["Error 24 - Invalid WindowSpec" & CR]);defconst('kError29,["Error 29 - Expression" & CR]);defconst('kError30,["Error 30 - Object is read only" & CR]);defconst('kError31,["Error 31 - Subscript or Frame error" & CR]);defconst('kError32,["Error 32 - Unknown Function" & CR]);defconst('kError46,["Error 46 - Input Error" & CR]);defconst('kError48,["Error 48 - Incorrect SAVE version" & CR]);defconst('kError59,["Error 59 - Zero step" & CR]);defconst('kError63,["Error 63 - Incorrect number of args" & CR]);defconst('kErrorM1,["I/O Error 1 - Illegal file name" & CR]);defconst('kErrorM2,["I/O Error 2 - Illegal key" & CR]);defconst('kErrorM3,["I/O Error 3 - Opened without keys" & CR]);defconst('kErrorM4,["I/O Error 4 - Incorrect key type" & CR]);defconst('kErrorM5,["I/O Error 5 - File already Exists" & CR]);defconst('kErrorM6,["I/O Error 6 - End of file" & CR]);defconst('kErrorM10,["I/O Error 10 - File not found" & CR]);defconst('kErrorM12,["I/O Error 12 - no key on OPEN" & CR]);defconst('kErrorM13,["I/O Error 13 - Channel not open" & CR]);defconst('kErrorM14,["I/O Error 14 - Error creating file" & CR]);defconst('kKeyword,["REM","LET","IF","GOTO","GOSUB","RETURN","FOR","NEXT","ON","READ","DATA","RESTORE","DIM","INPUT","PRINT","DELETE","RANDOMIZE","CHAIN","CLS","END","STOP","BYE","THEN","TO","STEP","AND","OR","NOT","NIL","TRUE","BEEP","ELSE","ERROR","TRACE","OFF","RM","OPEN","GET","PUT","DEL","CREATE","ENTER","MOD","DIV","HWINPUT","WINDOW","SHOW","HIDE","WPRINT","ESPY","NEWYORK","GENEVA","WAIT","ENVIRON","FUNCTION","DEF","WDRAW", "ERASE","HPPRINT","CLOSE"]);constant kREM:=1;constant kDATA:=2;constant kLET:=21;constant kRANDOMIZE:=22;constant kTRACE:=23;constant kWINDOW:=24;constant kSHOW:=25;constant kHIDE:=26;constant kWPRINT:=27;constant kFUNCTION:=28;constant kDEF:=29;constant kWDRAW:=30;constant kBEEP:=31;constant kFOR:=32;constant kNEXT:=33;constant kGOTO:=34;constant kGOSUB:=35;constant kRETURN:=36;constant kBYE:=37;constant kCHAIN:=38;constant kCLS:=39;constant kCREATE:=40;constant kOPEN:=41;constant kGET:=42;constant kPUT:=43;constant kDEL:=44;constant kEND:=45;constant kSTOP:=46;constant kPRINT:=47;constant kIF:=48;constant kDIM:=49;constant kWAIT:=50;constant kHPPRINT:=51;constant kENVIRON:=52;constant kDELETE:=53;constant kENTER:=54;constant kERASE:=55;constant kHWINPUT:=56;constant kINPUT:=57;constant kON:=58;constant kREAD:=59;constant kRESTORE:=60;constant kCLOSE:=61;defconst('kStatements,["REM","DATA",			"LET","RANDOMIZE","TRACE","WINDOW","SHOW","HIDE","WPRINT","FUNCTION","DEF","WDRAW","BEEP",			"IF","GOTO","GOSUB","RETURN","FOR","NEXT","ON","READ","RESTORE","DIM","INPUT",			"PRINT","DELETE","CHAIN","CLS","END","STOP","BYE","OPEN","GET","PUT","DEL",			"CREATE","ENTER","HWINPUT","WAIT","ENVIRON","ERASE","HPPRINT","CLOSE"]);defconst('kstatementCodes,[kREM,kDATA,			kLET,kRANDOMIZE,kTRACE,kWINDOW,kSHOW,kHIDE,kWPRINT,kFUNCTION,kDEF,kWDRAW,kBEEP,			kIF,kGOTO,kGOSUB,kRETURN,kFOR,kNEXT,kON,kREAD,kRESTORE,kDIM,kINPUT,kPRINT, 			kDELETE,kCHAIN,kCLS,kEND,kSTOP,kBYE,kOPEN,kGET,kPUT,kDEL,kCREATE,kENTER,			kHWINPUT,kWAIT,kENVIRON,kERASE,kHPPRINT,kCLOSE]);defconst('kConstants,{ 	name: ["VFFILLWHITE","VFFILLLTGRAY","VFFILLGRAY",			 "VFFILLDKGRAY","VFFILLBLACK",			 "VFFRAMEWHITE", "VFFRAMELTGRAY", "VFFRAMEGRAY",			 "VFFRAMEDKGRAY", "VFFRAMEBLACK","VFFRAMEMATTE",			 "VFNONE","VFWHITE","VFLTGRAY","VFGRAY","VFDKGRAY","VFBLACK",			 "VFPEN","VFSHADOW","VFROUND",			 "VVISIBLE","VAPPLICATION","VCALCULATEBOUNDS", "VCLIPPING","VFLOATING",			 "VREADONLY","VCLICKABLE","VNOFLAGS","VNOTHINGALLOWED","VANYTHINGALLOWED",			 "VSTROKESALLOWED","VGESTURESALLOWED","VSHAPESALLOWED","VSINGLEUNIT",			 "VCHARSALLOWED","VLETTERSALLOWED","VNAMEFIELD","VMATHALLOWED",			 "VPUNCTUATIONALLOWED","VCAPSREQUIRED","VNUMBERSALLOWED","VPHONEFIELD",			 "VDATEFIELD","VTIMEFIELD","VNOSPACES"],	value:[VFFILLWHITE,VFFILLLTGRAY,VFFILLGRAY,			 VFFILLDKGRAY, VFFILLBLACK,			 VFFRAMEWHITE, VFFRAMELTGRAY, VFFRAMEGRAY,			 VFFRAMEDKGRAY, VFFRAMEBLACK, VFFRAMEMATTE,			 VFNONE,VFWHITE,VFLTGRAY,VFGRAY,VFDKGRAY,VFBLACK,			 256,262144,16777216,			 VVISIBLE,VAPPLICATION,VCALCULATEBOUNDS, VCLIPPING,VFLOATING,			 VREADONLY,VCLICKABLE,VNOFLAGS,VNOTHINGALLOWED,VANYTHINGALLOWED,			 VSTROKESALLOWED,VGESTURESALLOWED,VSHAPESALLOWED,VSINGLEUNIT,			 VCHARSALLOWED,VLETTERSALLOWED,VNAMEFIELD,1<<17,			 VPUNCTUATIONALLOWED,VCAPSREQUIRED,VNUMBERSALLOWED,VPHONEFIELD,			 VDATEFIELD,VTIMEFIELD,VNOSPACES]});			 defconst('kCommand,["LIST","SAVE","LOAD","REPLACE","RENUM","RUN","BYE","REVUP",         "STATS","NEW","DIR","VARS","CON","LISTRUN","IMPORT","IMPORT1","STRIP",				 "EDIT"]);defconst('kFunctions,["ELEMENTS","ENV","SENDIRREMOTE"]);defconst('kCommandPickList, ["RUN","LIST","DIR","REPLACE","VARS","STATS","CON","RENUM","NEW",	'pickSeparator,	"LOAD filename",	"LIST",	"LIST [stmt[,stmt[,filename]]]",	"SAVE filename",	"RENUM [from[,to[,step[,base]]]]",	"RUN lineNo or filename",	"DELETE filename"]);	defconst('kStatementPickList, ["next lineNo", 'pickSeparator,	"CLS",	"REM text",	"IF cond",	"THEN stmt",	"ELSE stmt",	"GOTO lineNo",	"GOSUB lineNo",	"ON cond",	"READ var[,var...]",	"DATA const[,const]",	"INPUT var[,var...]",	"PRINT exp[, or ; exp...]",	'pickSeparator,	"OPEN ch,file[,key]",	"GET ch,var[,key]",	"PUT ch,var",	"DEL ch,var",	'pickSeparator,	"WINDOW wNum[,wSpec]",	"SHOW wNum",	"WPRINT wNum,var",	"HIDE [wNum]",	"HWINPUT var[,prompt[,list]]"]);	defconst('kcomms,	{bps: {name: [300,600,1200,2400,4800,7200,9600,12000,14400,19200,38400,57600,115200,230400],			 value: [k300bps,k600bps,k1200bps,k2400bps,k4800bps,k7200bps,k9600bps,k12000bps,			 			k14400bps,k19200bps,k38400bps,k57600bps,k115200bps,k230400bps]},	 dataBits: {name: [5,6,7,8],	 				value: [k5DataBits,k6DataBits,k7DataBits,k8DataBits]},	 stopbits: {name: [0,1,2],	 				value: [k1stopBits,k1pt5stopBits,k2stopBits]},	 parity:	  {name: ["no","odd","even"],	 				value: [kNoParity,kOddParity,kEvenParity]}	});defconst('kRenumWords,["GOTO ","GOSUB ","RESTORE","GOTO:",".GOTO","GOSUB:",".GOSUB"]);defconst('kBeeps, [ROM_bootsound, ROM_alarmwakeup, ROM_click, ROM_crumple, ROM_drawerclose,                   ROM_draweropen, ROM_flip, ROM_funbeep, ROM_hilitesound, ROM_plinkbeep,                   ROM_simpleBeep, ROM_wakeupbeep, ROM_plunk, ROM_poof]);                   defconst('kProtos, {   pt_userView: {goto: NIL, gosub: NIL, drawing: []},     checkbox:    {_proto: protoCheckBox, viewValue: NIL,    				  text: "Checkbox", viewBounds: {left: 100, right: 200, top:100, bottom: 120},    				  valueChanged: func() begin windowSpec.viewvalue:=self.viewValue end,    				  viewClickScript: func(unit) begin inherited:?viewClickScript(unit);    				  						 executor:userClickAction(unit,self) end},    				  						    draw:		 	 {viewClass: clEditView, viewBounds: {Left:1, right: 100, top:1, bottom: 100},   				  viewFlags: vClickable+vGesturesAllowed+vShapesAllowed,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1)+vfLinesGray,   				  viewLineSpacing: 20,   				  viewChildren: clone([]),   				  viewFont: simpleFont18,   				  viewaddChildScript: func(newOne) begin   				  		if length(windowSpec.viewChildren)=0 then windowSpec.viewChildren:=[];   				  		addArraySlot(windowSpec.viewChildren, newOne);					      NIL end },   				  			    // this one doesn't work, unless you open/close the extras drawer in between (?!)   LargeCloseBox:	{_proto: protolargeCloseBox,   				  declareSelf: 'base,   				  buttonClickScript: func() begin executor:userClickAction(NIL,self);    				  						   :hide() end},				  						   	// this one doesn't work: it may be the viewChildren slot for the checkbox   floatNGo:	 {_proto: protofloatNGo, viewBounds: {left: 50, right: 100, top: 6, bottom: 40},   				  text: "FloatNGo", viewChildren: [{_proto: protoStaticText}]},   				     glance:		 {_proto: protoGlance, viewBounds: {left: 100, right: 200, top: 60, bottom: 75},			    				  text: "Glance"},   gauge:       {viewClass: clGaugeView, viewValue:50,   				  viewBounds: {left: 100, right: 200, top: 90, bottom: 100},					  viewFlags: 3,					  gaugedrawlimits: TRUE,					  viewSetupFormScript: NIL},   				     text:	   	 {viewClass: clParagraphView, viewBounds: {Left:110, right: 220, top:1, bottom: 100},   				  viewFlags: vClickable+vGesturesAllowed+   				    vVisible+vCharsAllowed+vPunctuationAllowed+vNumbersAllowed,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1)+vfLinesGray,   				  viewLineSpacing: 16,   				  text: "input", viewFont: simpleFont18, tabs: [20,40,60,80,120,140,160,180],   				  viewChangedScript: func(slot,view) begin windowSpec.text:=self.text;    				  				         		 executor:userClickAction(NIL,self) end },	labelInput:	 {_proto: protoLabelInputLine, 					  viewBounds: {left:100, right: 240, top: 40, bottom: 60},			  		label: "Label", text: "", viewValue: 0, 					  textSetup: func() begin text end,					  viewShowScript: func() begin setValue(entryLine, 'text, text) end,   				  labelActionScript: func(x) begin windowspec.viewValue:=x;																  local s:=self._parent;    				  				   					NIL end,					  textChanged: func() begin																	windowSpec.text:=self.text;    				  				         		local s:=self._parent;    				  				   			    executor:userClickAction(NIL,s) end},   labelPicker: {_proto: protoLabelPicker, viewBounds: {left:100, right: 240, top: 40, bottom: 60},   				  labelCommands: ["One","Two","Three"], text: "labelPicker", viewValue: 0,   				  textSetup: func() begin labelCommands[viewValue] end,   				  labelActionScript: func(x) begin windowspec.viewValue:=x;    				  				   						  executor:userClickAction(NIL,self); NIL end},   month:		 {viewClass: clMonthView, viewBounds: {left: 100, right: 200, top: 120, bottom: 180},   				  selectedDates: [time()], viewFlags: vVisible+vClickable,   				  labelFont: ROM_fontsystem9Bold, dateFont: ROM_fontSystem9,   				  monthChangedScript: func() begin windowSpec.selectedDates:=self.selectedDates;    				  				         		executor:userClickAction(NIL,self) end},    				  				   						     paragraph:	 {viewClass: clParagraphView, viewBounds: {Left:1, right: 100, top:150, bottom: 240},   				  viewFlags: vVisible+vReadOnly,    				  viewFormat: vfFillWhite+vfFrameBlack+vfPen(1),   				  viewLineSpacing: 16,   				  text: "paragraph", viewFont: simpleFont12},				  				   						      				  				   						      				  				      picker:		 {_proto: protoPicker, Bounds: {left:1, right: 95, top:120, bottom: 140},   				  pickItems: [{item: "Picker", pickable: true, mark: kCheckMarkChar},   				  'pickseparator,"Two","Three"],					  viewFormat: vfFrameBlack+vfFillWhite+vfPen(2)+vfround(4),   				  pickActionScript: func(x) begin windowSpec.viewvalue:=x;    				  				         executor:userClickAction(NIL,self) end},				  				       				  				       rCheckbox:   {_proto: protoRCheckBox, viewValue: NIL,    				  text: "RCheckbox", viewBounds: {left: 1, right: 95, top:100, bottom: 120},    				  indent: 6,    				  valueChanged: func() begin windowSpec.viewvalue:=self.viewValue end,    				  viewSetupFormScript: func() begin indent:=viewBounds.right-10 end,    				  viewClickScript: func(unit) begin inherited:?viewClickScript(unit);    				  						 executor:userClickAction(unit,self) end},      // doesn't work: is it the child views again? 				  						    recToggle:	 {_proto: protoRecToggle},	scroller:	 {},  				  						     				  						    setClock:	 {_proto: protoSetClock, viewBounds: {left: 1, right: 64, top:1, bottom: 64},   				 minutes: date(time()).minute, hours: date(time()).hour,   				 timeChanged: func() begin windowSpec.hours:=hours;   				 									windowSpec.minutes:=minutes;   				 									:dirty();    				  				         		executor:userClickAction(NIL,self) end},  				     				 						 				  						    slider:      {_proto: protoSlider, viewValue:50,   				  viewBounds: {left: 100, right: 200, top: 90, bottom: 100},   				  viewSetupFormScript: func() begin end,   				  changedSlider: func() begin windowSpec.viewvalue:=self.viewValue;    				  						 executor:userClickAction(NIL,self) end}   });	  