{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f13\fnil Zapf Dingbats;}{\f14\fnil Bookman;}{\f15\fnil N Helvetica Narrow;}{\f16\fnil Palatino;}{\f18\fnil Zapf Chancery;}{\f20\froman Times;}{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f33\fnil Avant Garde;}{\f34\fnil New Century Schlbk;}{\f1904\fnil AppleIcon;}{\f2029\fnil Nadianne;}{\f2052\fnil Zeal;}{\f2999\fnil eWorld Tight;}{\f9840\fnil Espy Sans;}{\f9842\fnil Espy Sans Bold;}{\f12899\fnil AppleGaramond LtIt;}{\f12900\fnil AppleGaramond BkIt;}{\f12901\fnil AppleGaramond BdIt;}{\f12902\fnil AppleGaramond Lt;}{\f12903\fnil AppleGaramond Bk;}{\f12904\fnil AppleGaramond Bd;}{\f14003\fnil Newt Espy Plain;}{\f14004\fnil Newt Espy Bold;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s243\qj\fi180\sa240\keep\tqc\tx4320\tqr\tx8640 \f20 \sbasedon0\snext243 footer;}{\s254\qj\sb120\sa240\keep \b\f20 \sbasedon0\snext0 heading 2;}{\s255\qj\sb240\sa240\keep \f20\fs36 \sbasedon0\snext0 heading 1;}{\qj\fi180\sa240\keep \f20 \sbasedon222\snext0 Normal;}{\s2\fi-360\li720\sa60\keep \f20 \sbasedon0\snext2 BulletList;}{\s3\li360\sa240\keep \f22 \sbasedon0\snext0 code;}{\s4\qc\fi180\sa240\keep \f20\fs48 \sbasedon0\snext4 Title;}{\s5\qc\fi180\sa240\keep \f20\fs28 \sbasedon0\snext5 Byline;}{\s6\qc\fi180\sa240\keep \f20 \sbasedon0\snext0 Caption;}{\s7\qj\sb240\sa240\keep \f22\fs36 \sbasedon255\snext7 CodeRef;}{\s8\li180\keep \f20 \sbasedon0\snext9 Reference Title;}{\s9\qj\li360\sa240\keep \f20 \sbasedon8\snext8 Referenc Descr;}}\margl720\margr720\margt1080\margb720\deftab360\widowctrl\ftnbj \sectd \sbknone\linemod0\linex0\cols1\endnhere \pard\plain \s4\qc\fi180\sa240\keep \f20\fs48 Package Deal\par \pard\plain \s5\qr\fi180\sa240\keep \f20\fs28 Michael S. Engber, Apple Computer, Inc.\line Copyright \'a9 1996 Michael S. Engber\par \pard\plain \qj\fi180\sa240\keep \f20 This article discusses some of changes to packages in Newton OS 2.0. Several related topics, such as the details of the package format, Unit Import/Export, and the new Extras Drawer hooks, are mentioned peripherally to point out their relationship to packages and parts. In-depth coverage of those topics is beyond the scope of this article.\par To benefit from this article, you should have some experience using the Newton Toolkit (NTK) to write Newton applications for Newtons OS 2.0, and be familiar with the basic concepts of packages and parts. Familiarity with the \ldblquote Bit Parts\rdblquote  article (see \ldblquote References and Suggested Reading,\rdblquote  at the end of this article) would also be helpful.\par \pard \qj\fi180\sa240\keep Note that some of the details of creating parts with NTK are specific to NTK version 1.6. Earlier versions of NTK may not support parts, and future versions of NTK may support them in a different, more convenient, way.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 Basics\par \pard\plain \qj\fi180\sa240\keep \f20 Most people think they understand the concepts of packages and parts, but I\rquote m continually hearing nonsensical terms like \ldblquote auto package,\rdblquote  or \ldblquote my package\rquote s RemoveScript.\rdblquote  People often confuse packages and parts. Sometimes it\rquote s just a slip of the tongue. Sometimes it\rquote s indicative of deeper misunderstandings.\par \pard \qj\fi180\sa240\keep A package consists of a collection of zero or more parts. (Yes, it\rquote s possible\emdash but pointless\emdash to have a package containing no parts.) A modest example is shown in Figure 1 (in hex).\par \pard\plain \s3\qc\li360\sa240\keep \f22 7061636B616765306E6F6E6500000000\line 00000001000000020000000200000036\line 00000000000000000000000000000036\line 000000000058\par \pard\plain \s6\qc\fi180\sa240\keep \f20 Figure 1: The World\rquote s Smallest Package (54 bytes)\par \pard\plain \qj\fi180\sa240\keep \f20 Most packages are somewhat larger than 54 bytes, and consist of one or more parts. Table 1 lists the most common kinds of parts.\par \trowd \trgaph80\trleft3160 \clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrdb \clbrdrr\brdrhair \clshdng0\cellx4420\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrdb \clbrdrr\brdrhair \clshdng0\cellx6400\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrdb \clbrdrr\brdrhair \clshdng0\cellx9280\pard \qc\keep\keepn\intbl {\b Type}\cell \pard \qc\keep\keepn\intbl {\b Frame part?\cell }\pard \qc\keep\keepn\intbl {\b Description\cell }\pard \intbl \row \trowd \trgaph80\trleft3160 \clbrdrt\brdrdb \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx4420\clbrdrt\brdrdb \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx6400\clbrdrt\brdrdb \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx9280\pard \qc\keep\keepn\intbl {\f22 form\cell }\pard \qc\keep\keepn\intbl Yes\cell \pard \qj\keep\keepn\intbl Applications\cell \pard \intbl \row \trowd \trgaph80\trleft3160 \clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx4420\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx6400\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx9280\pard \qc\keep\keepn\intbl {\f22 book\cell }\pard \qc\keep\keepn\intbl Yes\cell \pard \qj\keep\keepn\intbl Books\cell \pard \intbl \row \pard \qc\keep\keepn\intbl {\f22 auto\cell }\pard \qc\keep\keepn\intbl Yes\cell \pard \qj\keep\keepn\intbl Tricky hacks \cell \pard \intbl \row \pard \qc\keep\keepn\intbl {\f22 font\cell }\pard \qc\keep\keepn\intbl Yes\cell \pard \qj\keep\keepn\intbl Additional fonts\cell \pard \intbl \row \pard \qc\keep\keepn\intbl {\f22 dict\cell }\pard \qc\keep\keepn\intbl Yes\cell \pard \qj\keep\keepn\intbl Custom dictionaries\cell \pard \intbl \row \trowd \trgaph80\trleft3160 \clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx4420\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx6400\clbrdrt\brdrhair \clbrdrl\brdrhair \clbrdrb\brdrhair \clbrdrr\brdrhair \clshdng0\cellx9280\pard \qc\keep\keepn\intbl {\f22 soup\cell }\pard \qc\keep\keepn\intbl No\cell \pard \qj\keep\keepn\intbl Store w/ read-only soups\cell \pard \intbl \row \pard\plain \s6\qc\fi180\sa240\keep \f20 \par Table 1: Part Types\par \pard\plain \qj\fi180\sa240\keep \f20 Notice that the second column of Table 1 indicates if a type of part is a frame part. {\i Frame parts} are basically just a single NewtonScript object \emdash  a frame. Conventions for what goes in the frame vary, depending on the type of part. For example, form parts keep their base view\rquote s template in a slot named {\f22 theForm}. \par \pard \qj\fi180\sa240\keep You can access the actual part frames (of a package\rquote s frame parts) via the {\f22 parts} slot of the frame returned by {\f22 GetPkgRefInfo}. There is bound to be some minor confusion in this regard. Although the argument passed to a form part\rquote s InstallScript is commonly called {\f22 partFrame}, it  is not actually a part frame. In version 1.x it was a clone of the part frame, and in 2.0 it is a frame that protos to the part frame. This detail may change. You should simply rely on the fact that {\f22 partFrame.slot} returns the specified slot from the part frame.\par \pard \qj\fi180\sa240\keep Most types of parts are frame parts (store parts being the most notable exception). There are other types of non-frame parts that can be created (e.g., communications drivers), but tools for doing so are not available yet.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 Package Objects\par \pard\plain \qj\fi180\sa240\keep \f20 In Newton OS 1.x there was no way to directly access packages. The call {\f22 GetPackages} returned an array of information about the active packages, but there was no object returned that was itself a package.\par \pard \qj\fi180\sa240\keep In Newton OS 2.0, packages are stored as virtual binary objects (VBOs). A reference to a package VBO is called a package reference (abbreviated pkgRef in many of the related function names). In most ways, package VBOs are the same as regular VBOs created with {\i\f22 store}{\f22 :NewVBO}. For example, {\f22 GetVBOStore} can be used to determine the store on which a package resides.\par \pard \qj\fi180\sa240\keep The downside of representing packages this way is that, like ordinary VBOs, package VBOs are kept in a soup, providing a tempting target for hacking. The details of this soup are private and subject to change. APIs are provided for the supported operations. Anything you do outside of the supported APIs is likely to interfere with the current system (in some subtle way), not to mention breaking in future systems.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 Package References vs. Ordinary VBOs\par \pard\plain \qj\fi180\sa240\keep \f20 For most purposes, you can think of a package VBO as simply containing the binary data from the package file you created with NTK. There are a few place-holder fields (like the time of loading) that are filled in as the package is loaded, but apart from those, they are byte-wise identical \emdash  or so it seems.\par \pard \qj\fi180\sa240\keep If you create a VBO, set its class to {\f22 'package}, and then use {\f22 BinaryMunger} to copy in the bytes from a \ldblquote real\rdblquote  package, you\rquote ll wind up with something that looks like a package but is still not the real thing. Try passing it to {\f22 IsPackage}.\par \pard \qj\fi180\sa240\keep The differences are subtle. One obvious difference is that the real package is read-only. Another, more fundamental, difference is that the fake package is missing the relocation information that is associated with a package during the normal package-loading process. This relocation information is not part of the binary data and cannot be accessed via {\f22 ExtractByte}.\par \pard \qj\fi180\sa240\keep The only way to get a real package from the fake one is to pass it to {\i\f22 store}{\f22 :SuckPackageFromBinary},   which will create a real package from the data. There is no way to convert it in place.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 The Extras Drawer\par \pard\plain \qj\fi180\sa240\keep \f20 In 1.x, the Extras Drawer was used solely to launch applications. The icons in the Extras Drawer corresponded to form parts and book parts. Package removal was handled by the \ldblquote Remove Software\rdblquote  button, whose pop-up menu listed packages, not parts.\par In Newton OS 2.0, the \ldblquote Remove Software\rdblquote  button is gone. The Extras Drawer is one-stop shopping for all your package needs. Therefore, the model underlying the Extras Drawer icons is different. For example, a package that contains no form parts still needs an icon to represent it so the user will have something to delete.\par \pard \qj\fi180\sa240\keep The two obvious solutions are to have one icon per package or one icon per part. Neither of these solutions turns out to be satisfactory. Consider the following examples:\par \pard\plain \s2\fi-360\li720\sa60\keep \f20 \bullet  Some multi-part packages require two icons (e.g., form + book part)\par \bullet  Some multi-part packages require only one icon (e.g., form + auto part)\par \bullet  Non-frame-parts have nowhere to provide title and icon data (i.e., no part-frame)\par \par \pard\plain \qj\fi180\sa240\keep \f20 The approach adopted by the Extras Drawer is a hybrid of the two, sort of a Miranda rule for packages: \ldblquote You have the right to an icon. If you cannot afford an icon, one will be appointed for you.\rdblquote \par \pard \qj\fi180\sa240\keep Any frame part in a package can have an Extras Drawer icon by providing a text slot (and optionally, an icon slot) in its part frame. If no frame part in the package provides an icon, then a generic icon labeled with the package name is created.\par \pard \qj\fi180\sa240\keep This approach preserves the 1.x representation of existing packages, as well as providing flexibility for more complex packages created in the future. The majority of existing packages, which consist of a single form part{\ul , } get a single icon, just like they always have. Multi-part packages are also handled correctly. The form + book part example gets two icons, and the form + auto part example gets only one icon.\par \pard \qj\fi180\sa240\keep Unfortunately, existing packages that contain no form or book parts get the \ldblquote court-appointed\rdblquote  representation: a single generic icon (see Figure 2) labeled with their package name. Without more information, there is no way to do much better. Use NTK 1.6 to rebuild these packages and provide a more aesthetically-pleasing title and icon.\par \pard \qc\fi180\sa240\keep {{\pict\macpict\picw20\pich23 00a000000005001700191101a00082a03039a0008e01000a0000000003080240900004000000000017002000000005001700190000000500170019000100030000000fc000003cf00000f03c0003c00f00070003800780038007e00f8006783d80061ff5800607d5800603558006035580060355800603558006035580060355800783578003e35f0000fb7c00003ff000000fc00000030000a0008fa00083ff}}\par \pard\plain \s6\qc\fi180\sa240\keep \f20 Figure 2: Generic Icon\par \pard\plain \qj\fi180\sa240\keep \f20 For form parts, the title and icon slots are created from the settings in the Project Settings dialog box (under Output Settings). For other frame parts, you\rquote ll have to create these part-frame slots manually (this is something that could change in future versions of NTK). For example, in one of the project\rquote s text files you would define the title and icon slots with code like the following:\par \pard\plain \s3\li360\sa240\keep \f22 SetPartFrameSlot('title, "foo");\line SetPartFrameSlot('icon, GetPICTAsBits("foo picture", true));\par \pard\plain \qj\fi180\sa240\keep \f20 You shouldn\rquote t feel that you need to provide an icon for every part in your package \ldblquote just because you can.\rdblquote  For most packages, a single icon for the main form part will suffice. Extra icons serve no purpose, and will only confuse the user.\par If your package doesn\rquote t contain any frame parts (e.g., it contains just a soup part) you can avoid getting the generic icon by adding in a dummy frame part that specifies the title and icon. For example, you might add a form part that displays information about the package.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 Active vs. Inactive Packages\par \pard\plain \qj\fi180\sa240\keep \f20 Executing a package\rquote s InstallScript (and, in the case of form parts, creating the base view) is part of the process of activating a package. Executing the RemoveScript is part of the process of deactivating a package. Prior to Newton OS 2.0, packages were activated when they were installed and deactivated when they were removed. There was no concept of packages existing on a store and being inactive \emdash  unless you used a third-party utility. (By inactive package, I mean that the InstallScript has not yet run or, if the package was previously active, the RemoveScript ran during deactivation.)\par \pard \qj\fi180\sa240\keep In Newton OS 2.0, it\rquote s possible to have packages visible in the Extras Drawer that are not active. They are identified by either a special snowflake icon, if the user purposely \ldblquote froze\rdblquote  the package, or by an X\rquote d-out icon, if they are inactive due to an error or because the user suppressed package activation. (See the article \ldblquote Suppressing and Freezing Packages,\rdblquote  in this issue, for further details.)\par \pard \qj\fi180\sa240\keep For the most part, applications need not concern themselves with these details. Any package that correctly handles being installed and removed (by either deletion or card-yanking) should work correctly with user-controlled activation and deactivation.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 Invalid References\par \pard\plain \qj\fi180\sa240\keep \f20 Invalid references are references to NewtonScript objects residing in a package that is either inactive or unavailable (i.e., on a card that is in the process of being removed). This topic is discussed in the article \ldblquote Newton Still Needs the Card You Removed\rdblquote  (see \ldblquote References and Suggested Reading,\rdblquote  at the end of this article).\par \pard \qj\fi180\sa240\keep A reference to an object in a package goes bad after the package is deactivated. In 1.x, attempting to access such an object resulted in a -48214 error. In Newton OS 2.0, after a package is deactivated, existing references to it are replaced with a special value. This means that instead of getting a cryptic -48214 error (which also occurs when loading a bad package), you get a more specific error message in the NTK Inspector:\par \pard\plain \s3\li360\sa60\keep \f22 !!! Exception: Pointer to deactivated package\par \pard\plain \qj\fi180\sa60\keep \f20 \tab \tab or\par \pard\plain \s3\li360\sa60\keep \f22 <bad pkg ref>\par \pard\plain \qj\fi180\sa60\keep \f20 \tab \tab or\par \pard\plain \s3\li360\sa240\keep \f22 bus error with value 77 \par \pard\plain \qj\fi180\sa240\keep \f20 A related problem occurs for packages on a card that is in the process of being removed. Obviously, the objects in the package are unavailable, and attempting to access them results in the dreaded card-reinsertion dialog. You\rquote ll be relieved to hear that the card-reinsertion dialog has not gone away in Newton OS 2.0. However, it has been somewhat improved. It now displays the name of the package that used the invalid reference. There are other, less common, causes for the card-reinsertion dialog appearing (e.g., attempting to access the store) which do not allow for the package to be easily determined. In these cases, the package name is not displayed.\par \pard \qj\fi180\sa240\keep Knowing the name of the offending package is a great help to users trying to figure out why they can\rquote t remove a card, but this does little to help a developer figure out why his package is plagued by the \ldblquote grip of death.\rdblquote  There are plans to provide a tool to allow developers to find out what invalid object was accessed.\par \pard \qj\fi180\sa240\keep There is also a new function available for dealing with these problems. Previously, it was impossible to determine if a reference was valid before attempting to access it. In Newton OS 2.0 you can use the function {\f22 IsValid} to make this determination.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 New Part-Frame Slots\par \pard\plain \qj\fi180\sa240\keep \f20 Newton OS 2.0 offers you some new part-frame slots. Some of the slots are data, and some are methods (i.e., they contain functions). You set their values using the {\f22 SetPartFrameSlot} function in NTK, as was previously described.\par \pard\plain \s254\qj\sb120\sa240\keep \b\f20 New Part-Frame Data Slots\par \pard\plain \qj\li180\sa60\keep \f20 {\b\f22 app\line icon}{\b \line }{\b\f22 title\par }\pard \qj\fi180\sa240\keep In 1.x, the {\f22 app}, {\f22 icon}, and {\f22 title} slots were used to specify a form part\rquote s appSymbol and Extras Drawer icon and its Extras Drawer title, respectively. In 2.0, they can be used for any frame part. For non-form-parts{\ul ,} the appSymbol is used to identify the part when using {\f22 SetExtrasInfo}.\par \pard \qj\li180\sa60\keep {\b\f22 labels}{\f22 \par }\pard \qj\fi180\sa240\keep This slot is used to pre-file an Extras Drawer icon. For example, use {\f22 '_SetUp} to specify that the icon initially goes in the SetUp folder. See the article \ldblquote Extra, Extra\rdblquote  (see \ldblquote References and Suggested Reading,\rdblquote  at the end of this article) for a more in-depth example.\par \pard\plain \s254\qj\sb120\sa240\keep \b\f20 New (Optional) Part-Frame Methods\par \pard\plain \qj\fi180\sa60\keep \f20 {\b\f22 DoNotInstall}{\f22 \par }\pard \qj\fi180\sb80\sa80\keep The {\f22 DoNotInstall} message is sent (with no arguments) before the package is installed on the unit. It gives a package a chance to prevent itself from being installed. The message is sent to every frame-part in a package. If any of them return a non-{\f22 nil} value, the package is not installed. You should provide the user with some sort of feedback, rather than silently failing to install. For example, a package wanting to ensure it was only installed on the internal store could have a {\f22 DoNotInstall} like the following:\par \pard\plain \s3\li360\sa240\keep \f22 {\fs20 func()\line begin\line \tab if GetStores()[0] <> GetVBOStore(ObjectPkgRef('foo)) then\line \tab \tab begin\line \tab \tab \tab GetRoot():Notify(kNotifyAlert, kAppName, "This package was not installed.\line \tab \tab \tab \tab It can only be installed onto the internal store.");\line \tab \tab \tab true;\line \tab \tab end;\line end\par }\pard\plain \qj\fi180\sa60\keep \f20 {\b\f22 DeletionScript}\par \pard \qj\fi180\sa240\keep The {\f22 DeletionScript} message is sent (with no arguments) just prior to the package being deleted. This script allows you to distinguish the user scrubbing a package from the user yanking a package\rquote s card. A {\f22 DeletionScript} typically does \ldblquote clean up\rdblquote  like deleting soups, deleting local folders, and eliminating preferences from the system soup.\par \pard \qj\li180\sa60\keep {\b\f22 RemovalApproval}{\b \line }{\b\f22 ImportDisabled}\par \pard \qj\fi180\sa240\keep These scripts are used to inform a package that some of the units it\rquote s importing are being removed. {\f22 RemovalApproval} give the package a chance, prior to removal, to warn the user of the consequences of removing the unit. {\f22 ImportDisabled} is sent if the unit is subsequently removed. See the \ldblquote MooUnit\rdblquote  DTS sample code for further details on units.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 New Package-Related Functions\par \pard\plain \fi180\sa60\keep \f20 {\b\f22 GetPackageNames}{\f22 (store)\line }\tab return value - array of package names (strings)\line \tab {\f22 store} - store on which the package resides\par \pard \fi180\sa240\keep {\f22 GetPackageNames} returns the names of all the packages on the specified store. Note that it returns the names of all the packages, even those that are not active (e.g., frozen packages).{\b\f22 \par }\pard \fi180\sb120\sa60\keep {\b\f22 GetPkgRef}{\f22 (packageName, store)\line }\tab return value - package reference\line \tab {\f22 packageName} - name of the package\line \tab {\f22 store} - store on which the package resides\par \pard \fi180\sa240\keep {\f22 GetPkgRef} returns a reference to a package given the package\rquote s name and the store on which it resides.\par \pard \fi180\sb120\sa60\keep {\b\f22 ObjectPkgRef}{\f22 (object)\line }\tab return value - package reference ({\f22 nil} if object is not in a package)\line \tab {\f22 object} - any NewtonScript object\par \pard \qj\fi180\sa240\keep Determines which package an object is in and returns the package reference. Returns {\f22 nil} for immediates and other objects in the NewtonScript heap, including soup entries.\par \pard \qj\fi180\sa240\keep A package can get its own package reference by calling {\f22 ObjectPkgRef} with any non-immediate literal. For example, {\f22 ObjectPkgRef('read}, {\f22 ObjectPkgRef("my")}, or {\f22 ObjectPkgRef('[l,i,p,s])}. Note that the {\f22 InstallScript} of a form part is cloned (by EnsureInternal), and the clone is executed. This means that the above examples wouldn\rquote t work because the entire code block \emdash  including the argument to {\f22 ObjectPkgRef }\emdash  resides in the NewtonScript heap. A workaround is to get an object from the package via the argument passed to the {\f22 InstallScript} \emdash  e.g., {\f22 ObjectPkgRef(partFrame.theForm)}. Other types of parts do not have this problem.\par \pard \fi180\sb120\sa60\keep {\b\f22 GetPkgRefInfo}{\f22 (pkgRef)\line }\tab return value - info frame (see below)\line \tab {\f22 pkgRef} - package reference\par \pard \qj\fi180\sa240\keep This function returns a frame of information about the specified package, as shown below.\par \pard \fi180\sa240\keep {\f22\fs20 \{\line \tab size:\tab \tab \tab \tab \tab <int>\tab \tab \tab \tab \tab // uncompressed package size in bytes,\line \tab store:\tab \tab \tab \tab <frame>\tab \tab \tab \tab // store on which package resides\line \tab title:\tab \tab \tab \tab <string>,\tab \tab \tab // package name\line \tab version:\tab \tab \tab \tab <int>,\tab \tab \tab \tab // version number\line \tab timestamp:\tab \tab \tab <int>,\tab \tab \tab \tab // date package was loaded\line \tab creationDate:\tab \tab <int>,\tab \tab \tab \tab // date package was created\line \tab dispatchOnly:\tab \tab <nil or non-nil>,\tab // is package dispatch-only?\line \tab copyprotection:\tab <nil or non-nil>,\tab // is package copyprotected?\line \line \tab copyright:\tab \tab <string>,\tab \tab \tab \tab // copyright string\line \tab compressed: \tab <nil or non-nil>,\tab \tab // is package compressed?\line \tab cmprsdSz:\tab \tab <int>,\tab \tab \tab \tab \tab // compressed size of package in bytes\line \line \tab numparts:\tab \tab <int>,\tab \tab \tab \tab \tab // #parts in the packages\line \tab parts:\tab \tab \tab <part data array>,\tab // part-frames for the frame parts\line \tab partTypes:\tab \tab <array of symbols>,\tab // part types corresponding to data in parts slot\line \line \tab // other slots are private and undocumented\line \}}\par \pard \fi180\sb120\sa60\keep {\b\f22 IsPackageActive}{\f22 (pkgRef)\line }\tab return value - {\f22 nil} or non-{\f22 nil}\line \tab {\f22 pkgRef} - package reference\par \pard \fi180\sa240\keep {\f22 IsPackageActive} determines if the specified package is active or not.{\b\f22 \par }\pard \fi180\sb120\sa60\keep {\b\f22 IsPackage}{\f22 (object)\line }\tab return value - {\f22 nil} or non-{\f22 nil}\line \tab {\f22 object} - any NewtonScript object\par \pard \fi180\sa240\keep {\f22 IsPackage} determines if the specified object is a package reference.{\b\f22 \par }\pard \fi180\sb120\sa60\keep {\b\f22 IsValid}{\f22 (object)\line }\tab return value - {\f22 nil} or non-{\f22 nil}\line \tab {\f22 object} - any NewtonScript object\par \pard \fi180\sa240\keep {\f22 IsValid} detects if the specified object is (was) in a package that is no longer active. If the package is on a card in the process of being removed, it will return {\f22 nil} and will not cause the card-reinsertion dialog. {\f22 IsValid}  returns {\f22 true} for immediates or objects that do not reside in a package (e.g., in the NS heap or in ROM).\par \pard \fi180\sa240\keep Note that {\f22 IsValid} does not deeply check the object.{\b\f22 \par }\pard \fi180\sb120\sa60\keep {\b\f22 MarkPackageBusy}{\f22 (pkgRef, appName, reason)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\line \tab {\f22 appName} - string describing the entity requiring the package\line \tab {\f22 reason} - string describing why the package should not be deactivated\par \pard \fi180\sa240\keep {\f22 MarkPackageBusy} marks the specified package as busy. This means the user will be warned and given a chance to abort operations that deactivate the package (e.g., removing or moving it). The {\f22 appName} and {\f22 reason} are used to generate the message shown to the user.\par \pard \fi180\sa240\keep You should mark a package busy if its deactivation will cause you problems. For example, a store part might be providing critical data. Since the user may still proceed with the operation, you should attempt to handle this eventuality as gracefully as possible.\par \pard \fi180\sa240\keep Be sure to release the package as soon as possible so as not to inconvenience the user.\par \pard \fi180\sa240\keep Note that you do not need to use {\f22 MarkPackageBusy} on a package because you\rquote re importing units from it. Units have their own mechanism for dealing with this problem ({\f22 RemovalApproval} et al.).\par \pard \fi180\sb120\sa60\keep {\b\f22 MarkPackageNotBusy}{\f22 (pkgRef)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\par \pard \fi180\sa240\keep {\f22 MarkPackageNotBusy}t marks the specified package as no longer busy.{\b\f22 \par }\pard \fi180\sb120\sa60\keep {\b\f22 SafeRemovePackage}{\f22 (pkgRef)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\par \pard \qj\fi180\sa240\keep {\f22 SafeRemovePackage} removes the specified package. If the package is busy, the user is given a chance to abort the operation.\par \pard \fi180\sb120\sa60\keep {\b\f22 SafeMovePackage}{\f22 (pkgRef, destStore)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\line \tab {\f22 destStore} - store to which to move the package\par \pard \qj\fi180\sa240\keep {\f22 SafeMovePackage} moves a the specified package to the specified store. If the package is busy, the user is given a chance to abort the operation; moving a package requires deactivating it, moving it, and then reactivating it.\par \pard \fi180\sb120\sa60\keep {\b\f22 SafeFreezePackage}{\f22 (pkgRef)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\par \pard \qj\fi180\sa240\keep {\f22 SafeFreezePackage} freezes the specified package. If the package is busy, the user is given a chance to abort the operation.\par \pard \fi180\sb120\sa60\keep {\b\f22 ThawPackage}{\f22 (pkgRef)\line }\tab return value - unspecified\line \tab {\f22 pkgRef} - package reference\par \pard \qj\fi180\sa240\keep {\f22 ThawPackage} un-freezes the specified package.\par \pard\plain \s255\qj\sb240\sa240\keep \f20\fs36 References and Suggested Reading\par \pard\plain \s8\li180\keep \f20 Engber, Michael S., \ldblquote Bit Parts.\rdblquote  {\i PIE Developers,} May 1994, pp. 27\endash 29.\par \pard\plain \s9\qj\li360\sa60\keep \f20 This article discusses packages in Newton OS 1.x and creating them with older versions of NTK. Most of the information is still relevant. It is available from the various PIE DTS CDs and archives as well as for ftp from\par \pard \s9\qj\li360\sa240\keep \tab {\f22 ftp.apple.com/pub/engber/newt/articles/BitParts.rtf}. \par \pard\plain \s8\li180\keep \f20 Engber, Michael S., \ldblquote MooUnit.\rdblquote  PIE DTS Sample Code, Fall 1995.\par \pard\plain \s9\qj\li360\sa240\keep \f20 This sample code provides documentation on unit import/export and a simple example. It is available from the various PIE DTS CDs and archives.\par \pard\plain \s8\li180\keep \f20 Engber, Michael S., \ldblquote Newton Still Needs the Card You Removed.\rdblquote  {\i Double Tap,} May 1994, pp. 12\endash 18.\par \pard\plain \s9\qj\li360\sa60\keep \f20 This article provides an in-depth discussion of invalid references (to objects in inactive packages). It is available from the various PIE DTS CDs and archives as well as for ftp from\par \pard \s9\qj\li360\sa240\keep \tab {\f22 ftp.apple.com/pub/engber/newt/articles/NewtonStillNeedsTheCard.rtf}. \par \pard\plain \s8\li180\keep \f20 Goodman, Jerry, \ldblquote Psychic Archaeology.\rdblquote  1980, Berkley Books.\par \pard\plain \s9\qj\li360\sa240\keep \f20 This book discusses techniques for researching artifacts of mysterious origin about which very little factual information is known.\par \pard\plain \s8\li180\keep \f20 Sharp, Maurice, \ldblquote Extra Extra.\rdblquote  {\i Newton Technology Journal,} February 1996.\par \pard\plain \s9\qj\li360\sa240\keep \f20 This article discusses various features of the 2.0 Extras Drawer that your package can utilize. \par }