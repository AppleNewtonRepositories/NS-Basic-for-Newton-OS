This is sample code to do a number of things. These samples are not in the manual.Contents======== 1. Pass output to the QCHART 2. Open other applications from NS BASIC 3. How to access elements of a frame 4. Write to the calendar application 5. Write to the To do application 6. Write to the Notepad 7. List a program to the Notepad 8. List the contents of Quickfigure spreadsheet to the screen 9. Dump all notes to the serial port10. Demonstrate recognition modes11. Find meetings and make a Note out of them12. How to put a popup into the App Info buttonCode Samples============1. Pass output to the QCHART module of Quickfigure and producecharts and graphs.0010 LET a=[1,2,5,4,3,1,2,3,4,5]0020 LET getroot().|qf_qchart:donv|.ddxdata=a0021 LET getroot().|qf_qchart:donv|.rows=50022 LET getroot().|qf_qchart:donv|.cols=20030 LET getroot().|qf_qchart:donv|.ddxfrom='|basic:nsbasic|0040 LET x:=getroot().|qf_Qchart:donv|:open()2. Open other applications from NS BASIC0010 a:=getroot().|qfig:donv|:open()3. How to access elements of a frame0010 REM demonstrate variable referencing0020 LET X={A: 1, B: 2, C: 3}0030 LET Y=intern("B")0040 PRINT X.(Y)0050 LET GG:=getglobals()0060 Y=ELEMENTS(GG)0070 FOR I=0 TO length(GG)-10080    PRINT Y[I], GG.(intern(y[i]))0090 NEXT IOutput:2...traceUuserConfiguration4. Write to the calendar application0010 rem write to Calendar0020 open ch,"calendar",mtgstartdate0030 LET n={}0040 LET n.viewstationery='meeting0055 LET x=stringtodate("9:00 6/3/94")0060 LET n.mtgstartdate=x0070 LET n.mtgtext="Meet with Bob"0080 LET n.mtgduration=300110 put ch,n0120 if fstat>0 then stop5. Write to the To do application0010 rem write to To Do0020 open ch,"To Do",mtgstartdate0030 LET n={data:[{}]}0040 LET n.viewstationery='todoitem0050 LET n.height=1000060 LET n.mtgstartdate=time()0065 LET n.mtgpriority=00070 LET n.data[0].viewstationery='para0080 LET n.data[0].viewbounds={left:0, right:200, top:0, bottom:100}0090 LET n.data[0].text="Hello World"0091 LET n.data[0].mtgdone=nil0095 LET n.data[0].viewfont=getglobals().userconfiguration.userfont0100 LET n.timestamp=time()0110 put ch,n0120 if fstat>0 then stop6. Write to the Notepad (Newton OS 1.x)0010 rem write to notepad0020 open ch,"notes",timestamp0030 LET n={data:[{}]}0040 LET n.viewstationery='paperroll0050 LET n.height=1000070 LET n.data[0].viewstationery='para0080 LET n.data[0].viewbounds={left:0, right:200, top:0, bottom:100}0090 LET n.data[0].text="Hello World"0095 LET n.data[0].viewfont=getglobals().userconfiguration.userfont0100 LET n.timestamp=time()0110 put ch,n0120 if fstat>0 then stop[Note that this can now be done much easily using the makeTextNote in Newton OS 2.0.See Tech Note 26 for more information]7. List a program to the Notepad (Newton OS 1.x)0010 rem list a program to notepad0020 open pch,"notes.Bas:NSBASIC",lineno0030 LET x=""0040 get pch,stmt0050 if Stmt.text=nil Then goto 1000060 LET x=x & Stmt.lineno & " " & Stmt.text & chr(13)0070 GOTO 00400100 rem end of stmts0110 GOSUB 10000120 stop1000 rem write to notepad1020 open ch,"notes",timestamp1030 if fstat>0 then stop1040 LET n={data:[{}]}1050 LET n.viewstationery='paperroll1060 LET n.height=10001070 LET n.data[0].viewstationery='para1080 LET n.data[0].viewbounds={left:0, right:200, top:0, bottom:100}1090 LET n.data[0].text=x1100 LET n.data[0].viewfont=getglobals().userconfiguration.userfont1110 LET n.timestamp=time()1120 put ch,n1130 if fstat>0 then stop1140 return[Note that this can now be done much easily using the makeTextNote in Newton OS 2.0.See Tech Note 26 for more information]8. List the contents of Quickfigure spreadsheet to the screen0010 rem List contents of spreadsheet0015 open ch,"qfig:donv"0020 get ch,f10030 get ch,f20050 LET x=elements(f1.values)0060 for i=0 to length(x)-10070   LET y=intern(x[i])0080   PRINT x[i],f1.values.(y),f2.data.(y).formula0100 next i9. Dump all notes to the serial port0010 rem dump all notes to serial port0020 open ch,"notes",timestamp0025 environ io="s0"0030 get ch,n0040 if fstat=1 then goto 90000043 print datentime(n.timestamp)0045 for i=0 to length(n.data)-10050   print n.data[i].text0055 next i0057 print " "0060 GOTO 00309000 rem fin9010 environ io="screen"10. Demonstrate recognition modes 0010 rem demonstrate recognition modes0020 cls0030 LET recogs=[0, vNumbersAllowed, vPhoneField, vDateField, vTimeField, vMathAllowed]0031 LET recogs[0]=vCharsAllowed+vPunctuationAllowed+vNumbersAllowed0100 rem get popup for recog type0110 LET w2s.viewBounds={left: 1, right: 200, top:20, bottom: 36}0120 LET w2s.text="Recognition Type"0130 LET w2s.labelcommands=["Anything","Number","Phone","Date","Time","Math"]0131 LET w2s.index=00140 window w2,w2s,"LabelPicker"0150 show w20200 rem set up input field0210 LET w3s.viewBounds={left: 10, right: 230, top: 100, bottom: 200}0220 LET w3s.viewFlags=vVisible+vClickable+vGesturesAllowed+recogs[w2s.index]0230 LET w3s.text=""0280 window w3,w3s,"Text"0290 show w311. Find meetings and make a Note out of them (Ron Nadeau rn@westnet.com)Check this out, it's a little program to find meetings with a keyword and optionally write the result to the notepad.  The only problem it has is the SCROLLER won't display all the meetings if there are more than one or two dozen matches, like if you do a search for "*". But it will write the whole result to the notepad.[Note that this can now be done much easily using the makeTextNote in Newton OS 2.0.See Tech Note 26 for more information]0010 REM scandates.txt0020 ON ERROR GOTO 99990100 LET wa = {}0110 LET wa.goto = 99990120 WINDOW w, wa, "app"0130 SHOW w0200 LET spec = {goto: 1000, text: "New Scan", viewBounds: {top: 60, left: 60, bottom: 79, right: 179}, viewFont: {family: 'geneva, face: 1, size: 12}, viewJustify: 2}0210 WINDOW wa, spec0220 LET spec = {goto: 2000, text: "Save to Notepad", viewBounds: {top: 80, left: 60, bottom: 99, right: 179}, viewFont: {family: 'geneva, face: 1, size: 12}, viewJustify: 2}0230 WINDOW wb, spec0240 SHOW wa, wb0250 LET rspec = {text: "", boxtitle: "Scan Result", editOK: TRUE, viewBounds: {top: 140, left: 60, bottom: 260, right: 180}}0260 WINDOW wr, rspec, "SCROLLER"0270 SHOW wr0280 WAIT 100000290 GOTO 02801000 LET result$ = ""1010 LET totalhrs = 01020 HWINPUT key$, "Keyword:", ["*", "CaryRoad"]1030 IF STREQUAL(key$, "") THEN GOTO 90001040 OPEN ch, "calendar", mtgstartdate1050 GET ch, n1060 IF NOT(n) THEN GOTO 15001070 IF STREQUAL(key$, "*") THEN GOTO 12001080 IF STREQUAL(key$, n.mtgText) THEN GOTO 12001090 GOTO 10501200 LET mdate$ = SHORTDATESTR(n.mtgStartDate, 0)1210 LET hrs = n.mtgDuration/601220 LET totalhrs = totalhrs + hrs1230 LET result$ = result$ & mdate$ & " \t" & n.mtgText & "\t" & NUMBERSTR(hrs) & "\n"1240 GOTO 10501500 IF totalhrs = 0 THEN GOTO 91001510 IF STREQUAL(key$, "*") THEN GOTO 15301520 LET result$ = result$ & "\n" & "Total Hours = \t\t" & NUMBERSTR(totalhrs)1530 SETVALUE(U.rspec, 'text, result$)1531 SETVALUE(U.rspec, 'boxtitle, key$)1540 CLOSE ch1560 GOTO 02802000 wait 12010 open cn, "Notes", timestamp2020 IF FSTAT > 0 THEN GOTO 99992030 LET n = {}2031 LET n.data = [{}]2040 LET n.viewstationery = 'paperroll2050 LET n.height = 1002060 LET n.data[0].viewstationery = 'para2070 LET n.data[0].viewbounds = {left: 0, right: 200, top:0, bottom: 100}2080 LET n.data[0].text = result$2090 LET n.data[0].viewfont = getglobals().userconfiguration.userfont2100 LET n.timestamp = time()2110 PUT cn, n2120 IF FSTAT > 0 THEN GOTO 99992130 LET gspec = {}2132 LET gspec.text = "Save to Notepad OK"2133 LET gspec.viewBounds = {top: 115, left: 80, bottom: 134, right: 159}2134 WINDOW wg, gspec, "GLANCE"2136 SHOW wg2145 CLOSE cn2150 GOTO 02809000 NOTIFY("", "No Keyword!\nEnter Keyword or * for all Meetings")9010 GOTO 02809100 NOTIFY("", "No Matches Found...\nor No Meetings!")9110 GOTO 02809999 END12. How to put a popup into the App Info button0005  function doPress(a) begin self.selItem := a; end0010  REM APP Example0020  LET w1Spec := {Title: "App Example", GOTO:'appDone, GOTOinfo: 'showInfo}0030  WINDOW w1, w1Spec, "APP"0040  SHOW w10050 mainWait: WAIT -10100 appDone: REM tapped close box0110  HIDE0120  PRINT "Closed."0130  END0200 showInfo: REM Info button tapped0210  LET U.w1Spec.base.appInfo.pickactionscript := doPress0220  LET theV :=U.w1Spec.base.appInfo:popupmenu(["About","Help","Prefs",'PICKSOLIDSEPARATOR,"a","b","c","a","b","c","a","b","c","a","b","c","a","b","c","a","b","c","a","b","c"], nil)0225  LET w1Spec.base.appInfo.selItem = -10230  do while theV.viewCObject <> NIL0240    wait 10250  LOOP0260  PRINT "You Tapped: " ; w1Spec.base.appInfo.selItem0270  goto mainWait* run(tap i... notice the scrollers... oooooh ;) )(tap some of them)You Tapped: -1 (dismissed without selection!)You Tapped: 0You Tapped: 1You Tapped: 2(tap close box)Closed.*(Thanks to John Schettino at GTE Labs for this one)