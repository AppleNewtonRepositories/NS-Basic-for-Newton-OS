Release Notes: NS BASIC 2.52 -- Nov 13, 1995Enhancements in 2.501. Performance has been substantially improved:   Compute tasks       98% faster   Screen I/O          13% faster (might actually be more)   File I/O            85% faster		 Code Space          32% smaller   Programs need to be re ENTERed to run. See also the REVUP command below.2. NS BASIC can now be called as an external routine by other Newton applications. To run an NS BASIC program from another application, call the function getroot().|basic:nsbasic|:chain("<programName>",parameter), where      programName is the name of an NS BASIC program					parameter is a variable. You can access its value as chainParam.To return a value from NS BASIC, put the value you wish to return after the BYE statement.Example: Create the following program:* 10 REM calltest* 20 BYE chainParam+1* save calltest* byeNS BASIC quits. Now start your application: suppose it’s Quickfigure: Put the following into one of the cells:=getroot().|basic:NSBASIC|:chain("calltest",123);When you hit enter, the BASIC program will be run and the value of the cell will become 124. NS BASIC runs silently without changing the screen, unless you execute a PRINT or SHOW statement.You can put anything you want into the NS BASIC program, with one proviso: if the NS BASIC program halts at any point, to get input from the user for example, the calling program will continue execution with a return value of NIL, which may affect the calling program.Another use is in utilities such as GestureLaunch, from ICS. GestureLaunch allows you to call NS BASIC programs directly from the button bar, by overlaying commands on top of the buttons that are already there. For example, while tapping on the Names button will still bring up the list of names, holding the stylus there for a second or two will cause GestureLaunch to start an NS BASIC program.To do this, put the following into the script of GestureScript:getroot().|basic:NSBASIC|:chain("myBASICProgram",0)3. The CREATE, OPEN, CHAIN, DELETE and ENTER statements now take variables for filename. (Note: you may have to fix code in your programs, to put quotes around literal filenames!)4. When a window is tapped on, its window number is stored in the new global variable WSTAT.5. The first two arguments of the WINDOW statement are now mandatory.6. Expression only statements are now supported. Functions such as SendIRRemote() whose return values are not needed can be placed on a statement line by themselves.7. The new CLOSE statement frees up memory used by opening a file. With no arguments, all files are closed; you can also give a list of channels to close.8. The REVUP command converts all your programs to the current revision of NS BASIC. To use it, just type REVUP by itself after you start NS BASIC. This command can take a while to complete, depending on how many and how long your programs are. (If you need to go back to 2.04, REVUP exists there as well).Changes in Release 2.511. A new command, EDIT <lineNo> brings up statement <lineNo> into the Edit Box.2. A new option has been added to the IR Environ settings:0100 ENVIRON IR.charDelay=n, where n is the number of ticks. A tick is approximately 1/60 second.3. A bug in the RETURN statement has been fixed. On rare occasions, the program would RETURN to the wrong line number.4. A bug when explicitly setting ENVIRON IR.bytecount=NIL has been fixed. Since NIL is the default, nobody ever bothered trying this before.5. New function: HILITE(flag) This function will hilite a widget. Flag is set to TRUE (to hilite) or NIL (to unhilite). Example:0100 U.windowSpec:hilite(TRUE)Advanced users will recognise that this format will allow the use of many other NewtonScript functions on widgets.6. When a program is started, a garbarge collection is forced. This solves occasional problems where variables which reference Newton objects have been NILed out, yet the pointers have not yet been cleaned up by the Newton OS.Changes in Release 2.52 -- November 131. FOR/NEXT not indenting properly on LISTFixed. This was caused by Apple making changes in its libraries and adding a reserved word that wasn't documented. Called "Spaces", it had the same name as the variable in the LIST routine that controls indents. We're including the latest libraries when we build so 2.52 can run on the new Newton OS 2.0 units. As a result we're inheriting some problems.2. Bug in Block Splitting RoutinesFixed. We also found a bug in the block splitting routine that affected the cache. It was in 2.50 as well. This has been fixed, but we're still watching this RENUM/ENTER stuff carefully to make sure there aren't more problems. This bug was introduced in Rev 2.50.3. FOR/NEXT loops that are supposed to pass though were halting insteadExample:10 a=220 b=130 FOR I=a TO b40 NEXT I50 PRINT 3Fixed. The "3" did not print. This has been fixed, but the NEXT statement must bere-entered, or the entire program updated with REVUP, for this to take effect. Otherwise, program execution is unaffected. This bug was introduced as part of the optimizations in 2.50.4. HWINPUT returned a string when a integer was inputFixed. Unlike earlier revs of NS BASIC, 2.5 and 2.51 was always returning a string. The behavior has been restored to conform to previous revisions.5. Recognition flags not working properlyFixed. In another change to the Apple libraries, the vMathAllowed constant was dropped. In NS BASIC 2.52, it has been put back in, but it will go away in Rev 3.00. This also affected sveral other flags, such as vNumbersAllowed and vDateAllowed. To fix flags compiled under 2.51, the NEXT statement must be re-entered, or the entire program updated with REVUP. This bug was introduced in Rev 2.51.6. IF a="1" and b="2" then print "OK" processes incorrectly.Warning. The IF statement is parsing conditional expressions involving strings and OR and AND statements incorrectly. This is not a new problem: NS BASIC has always gotten this wrong: it just hasn't been discovered till now! Note the AND and OR are not documented functions in NS BASIC: we will work on this and support these functions fully in a future release.In the meantime, you can workaround by using the STREQUAL statement as follows:IF STREQUAL(a,"1") and STREQUAL(b,"2") then print "OK" // processes correctlyChanges in Release 2.52b  -- February 16, 1996NS BASIC has been rebuilt with new libraries from Apple. The serial communications on early Newtons should now work properly again.